str(titanic)
summary(titanic)
#Enter your code for your logistic regression model here.
initModel = glm(Survived ~ ., data = titanic, family = "binomial")
summary(initModel)
# create a model filtering for what appeared to be statistically significant in the initial model
filteredModel = glm(Survived ~ Pclass + Sex + Age + SibSp, data = titanic, family = "binomial")
summary(filteredModel)
#Enter your code for your logistic regression model here.
initial_model = glm(Survived ~ ., data = titanic, family = "binomial")
summary(initial_model)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
plot(age_sex_interaction_model)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
interact_plot(fitiris, pred = Sex, modx = Age)
library(jtools)
install.packages("jtools")
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
library(jtools)
interact_plot(fitiris, pred = Sex, modx = Age)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
library(jtools)
library(ggplot2)
interact_plot(fitiris, pred = Sex, modx = Age)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
library(jtools)
library(ggplot2)
interaction.plot(fitiris, pred = Sex, modx = Age)
require(ggthemes)
library(interplot)
install.packages("interplot")
require(ggthemes)
library(interplot)
interplot(m=age_sex_interaction_model, var1 = Age, var2 = Sex)
interplot(m=age_sex_interaction_model, var1 = titanic$Age, var2 = Sex)
interplot(m=age_sex_interaction_model, var1 = titanic$Age, var2 = titanic$Sex)
interplot(age_sex_interaction_model, var1 = titanic$Age, var2 = titanic$Sex)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
interplot(age_sex_interaction_model, var1 = titanic$Age, var2 = titanic$Sex)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
interplot(age_sex_interaction_model, var1 = Age, var2 = Sex)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
interplot(age_sex_interaction_model, Age, var2 = Sex)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
interplot(m = age_sex_interaction_model, var1 = "Age", var2 = "Sex")
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
interplot(m = age_sex_interaction_model, var1 = "Age", var2 = "Sex") +
xlab("Sex") +
ylab("Estimated Coefficient for Age") +
ggtitle("Estimated Coefficient for Age on Survival by Age") +
theme_few()
require(ggthemes)
library(interplot)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
interplot(m = age_sex_interaction_model, var1 = "Age", var2 = "Sex") +
xlab("Sex") +
ylab("Estimated Coefficient for Age") +
ggtitle("Estimated Coefficient for Age on Survival by Age") +
theme_few()
require(ggthemes)
library(interplot)
install.packages("ggthemes")
require(ggthemes)
library(interplot)
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
interplot(m = age_sex_interaction_model, var1 = "Age", var2 = "Sex") +
xlab("Sex") +
ylab("Estimated Coefficient for Age") +
ggtitle("Estimated Coefficient for Age on Survival by Age") +
theme_few()
age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
# interplot(m = age_sex_interaction_model, var1 = "Age", var2 = "Sex") +
#   xlab("Sex") +
#   ylab("Estimated Coefficient for Age") +
#   ggtitle("Estimated Coefficient for Age on Survival by Age") +
#   theme_few()
# age_sex_interaction_model <- glm(Survived ~ Pclass + Sex + Age + SibSp + Sex*Age, data=titanic, family = "binomial")
age_sex_interaction_model <- glm(Survived ~ Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
# interplot(m = age_sex_interaction_model, var1 = "Age", var2 = "Sex") +
#   xlab("Sex") +
#   ylab("Estimated Coefficient for Age") +
#   ggtitle("Estimated Coefficient for Age on Survival by Age") +
#   theme_few()
0.54-1.377-0.04
0.54-1.377
0.019-0.04
0.541-1.38
0.0190-0.0404
# interactions between sex and age
sex_siblings_interaction_model = glm(Survived ~ Sex*SibSp, data=titanic, family = "binomial")
summary(sex_siblings_interaction_model)
# interactions between sex and age
sex_siblings_interaction_model = glm(Survived ~ Sex*SibSp, data=titanic, family = "binomial")
summary(sex_siblings_interaction_model)
#define new observation
new_sex_siblings_data <- data.frame(Sex="female", SibSp = 0)
#use model to predict value of am
predict(sex_siblings_interaction_model, new_sex_siblings_data, type="response")
# interactions between sex and age
sex_siblings_interaction_model = glm(Survived ~ Sex*SibSp, data=titanic, family = "binomial")
summary(sex_siblings_interaction_model)
#define new observation
new_sex_siblings_data <- data.frame(Sex="female", SibSp = 0)
new_sex_siblings_data2 <- data.frame(Sex="male", SibSp = 0)
new_sex_siblings_data3 <- data.frame(Sex="female", SibSp = 1)
new_sex_siblings_data4 <- data.frame(Sex="male", SibSp = 1)
#use model to predict value of am
predict(sex_siblings_interaction_model, new_sex_siblings_data, type="response")
predict(sex_siblings_interaction_model, new_sex_siblings_data2, type="response")
predict(sex_siblings_interaction_model, new_sex_siblings_data3, type="response")
predict(sex_siblings_interaction_model, new_sex_siblings_data4, type="response")
sex_children_interaction_model = glm(Survived ~ Sex*Parch, data=titanic, family = "binomial")
summary(sex_children_interaction_model)
#define new observation
new_sex_children_data <- data.frame(Sex="female", Parch = 0)
new_sex_children_data2 <- data.frame(Sex="male", Parch = 0)
new_sex_children_data3 <- data.frame(Sex="female", Parch = 1)
new_sex_children_data4 <- data.frame(Sex="male", Parch = 1)
#use model to predict value of survival
predict(sex_children_interaction_model, new_sex_children_data, type="response")
predict(sex_children_interaction_model, new_sex_children_data2, type="response")
predict(sex_children_interaction_model, new_sex_children_data3, type="response")
predict(sex_children_interaction_model, new_sex_children_data4, type="response")
age_sex_interaction_model <- glm(Survived ~ Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
#define new observation
new_sex_age_data <- data.frame(Sex="female", Age = 28)
new_sex_age_data2 <- data.frame(Sex="male", Age = 28)
new_sex_age_data3 <- data.frame(Sex="female", Age = 38)
new_sex_age_data4 <- data.frame(Sex="male", Age = 38)
#use model to predict value of survival
predict(age_sex_interaction_model, new_sex_age_data, type="response")
predict(age_sex_interaction_model, new_sex_age_data2, type="response")
predict(age_sex_interaction_model, new_sex_age_data3, type="response")
predict(age_sex_interaction_model, new_sex_age_data4, type="response")
age_sex_interaction_model <- glm(Survived ~ Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
#define new observation
new_sex_age_data <- data.frame(Sex="female", Age = 28)
new_sex_age_data2 <- data.frame(Sex="male", Age = 28)
new_sex_age_data3 <- data.frame(Sex="female", Age = 38)
new_sex_age_data4 <- data.frame(Sex="female", Age = 48)
new_sex_age_data5 <- data.frame(Sex="female", Age = 58)
new_sex_age_data6 <- data.frame(Sex="female", Age = 68)
new_sex_age_data7 <- data.frame(Sex="male", Age = 38)
#use model to predict value of survival
predict(age_sex_interaction_model, new_sex_age_data, type="response")
predict(age_sex_interaction_model, new_sex_age_data2, type="response")
predict(age_sex_interaction_model, new_sex_age_data3, type="response")
predict(age_sex_interaction_model, new_sex_age_data4, type="response")
predict(age_sex_interaction_model, new_sex_age_data5, type="response")
predict(age_sex_interaction_model, new_sex_age_data6, type="response")
predict(age_sex_interaction_model, new_sex_age_data7, type="response")
sex_class_interaction_model <- glm(Survived ~ Sex*Pclass, data=titanic, family = "binomial")
summary(sex_class_interaction_model)
# Explanation:
#
# Survived = 3.41 - 3.95*Sexmale - 3.41*Pclass3 + 2.10*Sexmale*Pclass3
#
# Scenario #1: female, Pclass1
Survived = 3.41 - 3.95*0 - 3.41*0 + 2.10*0*0 = 3.41
# Explanation:
#
# Survived = 3.41 - 3.95*Sexmale - 3.41*Pclass3 + 2.10*Sexmale*Pclass3
#
# Scenario #1: female, Pclass1
# Survived = 3.41 - 3.95*0 - 3.41*0 + 2.10*0*0 = 3.41
new_sex_class_data <- data.frame(Sex="female", Pclass = 1)
predict(sex_class_interaction_model, new_sex_class_data, type="response")
# Explanation:
#
# Survived = 3.41 - 3.95*Sexmale - 3.41*Pclass3 + 2.10*Sexmale*Pclass3
#
# Scenario #1: female, Pclass1
# Survived = 3.41 - 3.95*0 - 3.41*0 + 2.10*0*0 = 3.41
new_sex_class_data <- data.frame(Sex="female", Pclass = "1")
predict(sex_class_interaction_model, new_sex_class_data, type="response")
# Scenario #2: female, Pclass2
# Scenario #3: female, Pclass3
#
# Scenario #4: male, Pclass1
# Scenario #5: male, Pclass2
# Scenario #6: male, Pclass3
# Explanation:
#
# Survived = 3.41 - 3.95*Sexmale - 3.41*Pclass3 + 2.10*Sexmale*Pclass3
#
# Scenario #1: female, Pclass1
# Survived = 3.41 - 3.95*0 - 3.41*0 + 2.10*0*0 = 3.41
new_sex_class_data <- data.frame(Sex="female", Pclass = "1")
predict(sex_class_interaction_model, new_sex_class_data, type="response")
# Scenario #2: female, Pclass2
# Survived = 3.41 - 3.95*0 - 3.41*0 + 2.10*0*0 = 3.41
new_sex_class_data2 <- data.frame(Sex="female", Pclass = "2")
predict(sex_class_interaction_model, new_sex_class_data2, type="response")
# Scenario #3: female, Pclass3
#
# Scenario #4: male, Pclass1
# Scenario #5: male, Pclass2
# Scenario #6: male, Pclass3
# Scenario #1: female, Pclass1
new_sex_class_data <- data.frame(Sex="female", Pclass = "1")
predict(sex_class_interaction_model, new_sex_class_data, type="response")
# Scenario #2: female, Pclass2
new_sex_class_data2 <- data.frame(Sex="female", Pclass = "2")
predict(sex_class_interaction_model, new_sex_class_data2, type="response")
# Scenario #3: female, Pclass3
new_sex_class_data3 <- data.frame(Sex="female", Pclass = "3")
predict(sex_class_interaction_model, new_sex_class_data3, type="response")
# Scenario #4: male, Pclass1
# Scenario #5: male, Pclass2
# Scenario #6: male, Pclass3
# Scenario #1: female, Pclass1
new_sex_class_data <- data.frame(Sex="female", Pclass = "1")
predict(sex_class_interaction_model, new_sex_class_data, type="response")
# Scenario #2: female, Pclass2
new_sex_class_data2 <- data.frame(Sex="female", Pclass = "2")
predict(sex_class_interaction_model, new_sex_class_data2, type="response")
# Scenario #3: female, Pclass3
new_sex_class_data3 <- data.frame(Sex="female", Pclass = "3")
predict(sex_class_interaction_model, new_sex_class_data3, type="response")
# Scenario #4: male, Pclass1
new_sex_class_data4 <- data.frame(Sex="male", Pclass = "1")
predict(sex_class_interaction_model, new_sex_class_data4, type="response")
# Scenario #5: male, Pclass2
# Scenario #6: male, Pclass3
# Scenario #1: female, Pclass1
new_sex_class_data <- data.frame(Sex="female", Pclass = "1")
predict(sex_class_interaction_model, new_sex_class_data, type="response")
# Scenario #2: female, Pclass2
new_sex_class_data2 <- data.frame(Sex="female", Pclass = "2")
predict(sex_class_interaction_model, new_sex_class_data2, type="response")
# Scenario #3: female, Pclass3
new_sex_class_data3 <- data.frame(Sex="female", Pclass = "3")
predict(sex_class_interaction_model, new_sex_class_data3, type="response")
# Scenario #4: male, Pclass1
new_sex_class_data4 <- data.frame(Sex="male", Pclass = "1")
predict(sex_class_interaction_model, new_sex_class_data4, type="response")
# Scenario #5: male, Pclass2
new_sex_class_data5 <- data.frame(Sex="male", Pclass = "2")
predict(sex_class_interaction_model, new_sex_class_data5, type="response")
# Scenario #6: male, Pclass3
new_sex_class_data6 <- data.frame(Sex="male", Pclass = "3")
predict(sex_class_interaction_model, new_sex_class_data6, type="response")
age_sex_interaction_model <- glm(Survived ~ Sex*Age, data=titanic, family = "binomial")
summary(age_sex_interaction_model)
# interactions between sex and age
sex_siblings_interaction_model = glm(Survived ~ Sex*SibSp, data=titanic, family = "binomial")
summary(sex_siblings_interaction_model)
sex_children_interaction_model = glm(Survived ~ Sex*Parch, data=titanic, family = "binomial")
summary(sex_children_interaction_model)
sex_class_interaction_model <- glm(Survived ~ Sex*Pclass, data=titanic, family = "binomial")
summary(sex_class_interaction_model)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
View(test)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
titanic$PassengerId <- NULL
titanic$Name <- NULL
titanic$Ticket <- NULL
titanic$Cabin <- NULL
#NA
titanic[titanic == "NA"] <- NA
#Factoring
titanic$Pclass = as.factor(titanic$Pclass)
titanic$Sex = as.factor(titanic$Sex)
titanic$Embarked = as.factor(titanic$Embarked)
hist(titanic$Age)
#The distribution is skewed right, so replace any NA values with the median.
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
titanic$Age = replace_NA(titanic$Age, median)
View(titanic)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
# survey.data$NoobOrNot <- ifelse(survey.data$OperatingSystem != "Mac Os X", FALSE,
#                                 ifelse(survey.data$TVhours > 10, TRUE, FALSE))
predict(initial_model, test, type="response")
round(predict(initial_model, test, type="response"))
# round(predict(initial_model, test, type="response"))
test$Survived <- ifelse(round(predict(initial_model, test, type="response")) == 0, 0, 1)
# round(predict(initial_model, test, type="response"))
test$Survived <- ifelse(predict(initial_model, test, type="response") > 0.5, 0, 1)
predict(initial_model, test, type="response")
test$Survived <- ifelse(round(predict(initial_model, test, type="response")) == 0, 0, 1)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
# test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
test$Survived <- ifelse(round(predict(initial_model, test, type="response")) == 0, 0, 1)
#Remove all columns except for PassengerId and Survived
test[ , 2:7] <- list(NULL)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
# test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
test$Survived <- ifelse(round(predict(initial_model, test, type="response")) == 0, 0, 1)
#Remove all columns except for PassengerId and Survived
test[ , 2:8] <- list(NULL)
wd()
ws
wd
getwd()
setwd("~/Winter 2022/TO 414 001 WN 2022/HW #3")
getwd()
#Remove all columns except for PassengerId and Survived
test[ , 2:8] <- list(NULL)
#Export dataframe to csv
write.csv(test,"C:/Users/kabdu/Documents/Winter 2022/TO 414 001 WN 2022/HW #3\\titanic_test_kaggle_submission.csv", row.names = TRUE)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
# test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
test$Survived <- ifelse(round(predict(initial_model, test, type="response")) == 0, 0, 1)
#Remove all columns except for PassengerId and Survived
test[ , 2:8] <- list(NULL)
#Export dataframe to csv
write.csv(test,"C:/Users/kabdu/Documents/Winter 2022/TO 414 001 WN 2022/HW #3\\titanic_test_kaggle_submission.csv", row.names = FALSE)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
# test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
test$Survived <- ifelse(round(predict(initial_model, test, type="response")) > 0.5, 0, 1)
#Remove all columns except for PassengerId and Survived
test[ , 2:8] <- list(NULL)
#Export dataframe to csv
write.csv(test,"C:/Users/kabdu/Documents/Winter 2022/TO 414 001 WN 2022/HW #3\\titanic_test_kaggle_submission.csv", row.names = FALSE)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
# test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
test$Survived <- ifelse(predict(initial_model, test, type="response") > 0.5, 0, 1)
#Remove all columns except for PassengerId and Survived
test[ , 2:8] <- list(NULL)
#Export dataframe to csv
write.csv(test,"C:/Users/kabdu/Documents/Winter 2022/TO 414 001 WN 2022/HW #3\\titanic_test_kaggle_submission.csv", row.names = FALSE)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
# test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
test$Survived <- ifelse(round(predict(initial_model, test, type="response")) == 0, 0, 1)
#Remove all columns except for PassengerId and Survived
test[ , 2:8] <- list(NULL)
#Export dataframe to csv
write.csv(test,"C:/Users/kabdu/Documents/Winter 2022/TO 414 001 WN 2022/HW #3\\titanic_test_kaggle_submission.csv", row.names = FALSE)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
# test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
all_interactions_model <- glm(Survived ~ Sex * Pclass + Sex * Parch + Sex * SibSp + Sex*Age, data = titanic, family = "binomial")
test$Survived <- ifelse(round(predict(all_interactions_model, test, type="response")) == 0, 0, 1)
#Remove all columns except for PassengerId and Survived
test[ , 2:8] <- list(NULL)
#Export dataframe to csv
write.csv(test,"C:/Users/kabdu/Documents/Winter 2022/TO 414 001 WN 2022/HW #3\\titanic_test_kaggle_submission.csv", row.names = FALSE)
#Enter your code for predicting outcomes in testing data here.
test <- read.csv("TitanicTest.csv")
#Cleaning
# test$PassengerId <- NULL
test$Name <- NULL
test$Ticket <- NULL
test$Cabin <- NULL
#NA
test[test == "NA"] <- NA
#Factoring
test$Pclass = as.factor(test$Pclass)
test$Sex = as.factor(test$Sex)
test$Embarked = as.factor(test$Embarked)
replace_NA = function(column, replace) {
return(ifelse(is.na(column), replace(column, na.rm = TRUE), column))
}
test$Age = replace_NA(test$Age, median)
test$Survived <- ifelse(round(predict(initial_model, test, type="response")) == 0, 0, 1)
#Remove all columns except for PassengerId and Survived
test[ , 2:8] <- list(NULL)
#Export dataframe to csv
write.csv(test,"C:/Users/kabdu/Documents/Winter 2022/TO 414 001 WN 2022/HW #3\\titanic_test_kaggle_submission.csv", row.names = FALSE)
